function f(n){const t=n.coordinates[0];let e=0;for(let a=0;a<t.length-1;a++)e+=t[a][0]*t[a+1][1],e-=t[a+1][0]*t[a][1];return Math.abs(e)/2}function R(n,t){const e=n.coordinates[0],a=t.coordinates[0],r=t.coordinates[1];let i=!1;for(let o=0,l=e.length-1;o<e.length;l=o++)e[o][1]>r!=e[l][1]>r&&a<(e[l][0]-e[o][0])*(r-e[o][1])/(e[l][1]-e[o][1])+e[o][0]&&(i=!i);return i}function C(n){const t=n.coordinates[0];let e=t[0][0],a=t[0][1],r=t[0][0],i=t[0][1];for(const o of t)e=Math.min(e,o[0]),a=Math.min(a,o[1]),r=Math.max(r,o[0]),i=Math.max(i,o[1]);return{minX:e,minY:a,maxX:r,maxY:i}}function w(n){const t=C(n),e=f(n);return{geometry:n,areaSqFt:e,bounds:t}}function b(n,t){const e=n.geometry,a=n.properties.areaSqFt||f(e),r=a*t.targetFAR,i=a*(t.targetCoveragePct/100),o=$(t.typology),l=[],s=C(e);f(e);const u=Math.ceil(Math.sqrt(t.numBuildings)),g=(s.maxX-s.minX)/u,h=(s.maxY-s.minY)/Math.ceil(t.numBuildings/u);let S=0,c=0;for(let m=0;m<Math.ceil(t.numBuildings/u)&&c<t.numBuildings;m++)for(let p=0;p<u&&c<t.numBuildings;p++){const d=s.minX+p*g+g/2,F=s.minY+m*h+h/2,P=r-S,v=t.numBuildings-c,B=P/v,y=Math.min(B,i-S);if(y>0){const x=k(c,d,F,g*.8,h*.8,y,o,t);l.push(x),S+=x.properties.areaSqFt||0,c++}}return l}function k(n,t,e,a,r,i,o,l){const s=a*r,u=Math.sqrt(i/s),g=a*u,h=r*u,S=A(t,e,g,h),c=g*h,m=Math.max(1,Math.floor(i/c)),p=m*10;return{id:`building_${n}`,type:"building",name:`Building ${n+1}`,geometry:S,properties:{areaSqFt:i,units:Math.floor(i/800),heightFt:Math.min(p,l.maxHeightFt||100),stories:m,use:q(o),color:z(o),rotation:0},metadata:{createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),source:"ai-generated"}}}function A(n,t,e,a){const r=e/2,i=a/2;return{type:"Polygon",coordinates:[[[n-r,t-i],[n+r,t-i],[n+r,t+i],[n-r,t+i],[n-r,t-i]]]}}function $(n){const t={bar:{id:"bar",name:"Bar Building",description:"Rectangular building with linear layout",shape:"rectangle",aspectRatio:3,defaultStories:3,defaultHeightFt:30},"L-shape":{id:"L-shape",name:"L-Shaped Building",description:"L-shaped building for corner lots",shape:"L-shape",aspectRatio:1.5,defaultStories:2,defaultHeightFt:20},podium:{id:"podium",name:"Podium Building",description:"Mixed-use with podium and tower",shape:"podium",aspectRatio:1,defaultStories:8,defaultHeightFt:80},custom:{id:"custom",name:"Custom Building",description:"Custom building design",shape:"custom",aspectRatio:1,defaultStories:2,defaultHeightFt:20}};return t[n]||t.bar}function q(n){switch(n.id){case"podium":return"mixed-use";case"bar":return"residential";case"L-shape":return"commercial";default:return"residential"}}function z(n){switch(n.id){case"podium":return"#8B5CF6";case"bar":return"#3B82F6";case"L-shape":return"#10B981";default:return"#6B7280"}}function D(n,t,e){const a=C(n);f(n);const r=t.stallWidthFt,i=t.stallDepthFt,o=t.aisleWidthFt,l=Math.floor((a.maxX-a.minX)/(r+o)),s=Math.floor((a.maxY-a.minY)/i),u=l*s,g=Math.min(e,u),h=[],S=[];let c=0,m=0,p=0;for(let F=0;F<s&&c<g;F++)for(let P=0;P<l&&c<g;P++){const v=a.minX+P*(r+o)+r/2,B=a.minY+F*i+i/2;if(R(n,{coordinates:[v,B]})){let y="standard";m<Math.floor(g*t.adaPct/100)?(y="ada",m++):p<Math.floor(g*t.evPct/100)&&(y="ev",p++);const x={id:`stall_${c}`,x:v,y:B,width:r,height:i,angle:t.layoutAngle||0,type:y};h.push(x);const M={id:`parking_${c}`,type:"parking",name:`Parking Stall ${c+1}`,geometry:E(x),properties:{areaSqFt:r*i,parkingSpaces:1,stallType:y,adaCompliant:y==="ada",evReady:y==="ev"},metadata:{createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),source:"ai-generated"}};S.push(M),c++}}const d={totalStalls:c,adaStalls:m,evStalls:p,utilizationPct:c/e*100,overlapCount:0};return{stalls:h,features:S,metrics:d}}function E(n){const t=n.width/2,e=n.height/2;return{type:"Polygon",coordinates:[[[n.x-t,n.y-e],[n.x+t,n.y-e],[n.x+t,n.y+e],[n.x-t,n.y+e],[n.x-t,n.y-e]]]}}function H(n,t,e){const a=n.filter(d=>d.type==="building"),r=n.filter(d=>d.type==="parking"),i=n.filter(d=>d.type==="greenspace"),o=a.reduce((d,F)=>d+(F.properties.areaSqFt||0),0);r.reduce((d,F)=>d+(F.properties.areaSqFt||0),0);const l=i.reduce((d,F)=>d+(stall.properties.areaSqFt||0),0),s=o/t*100,u=o/t,g=l/t*100,h=a.reduce((d,F)=>d+(F.properties.units||0),0),S=r.reduce((d,F)=>d+(F.properties.parkingSpaces||0),0),c=h>0?S/h:0,m=[],p=[];return e.zoning.maxFar&&u>e.zoning.maxFar&&m.push(`FAR ${u.toFixed(2)} exceeds maximum ${e.zoning.maxFar}`),e.zoning.maxCoveragePct&&s>e.zoning.maxCoveragePct&&m.push(`Coverage ${s.toFixed(1)}% exceeds maximum ${e.zoning.maxCoveragePct}%`),e.zoning.minParkingRatio&&c<e.zoning.minParkingRatio&&m.push(`Parking ratio ${c.toFixed(2)} below minimum ${e.zoning.minParkingRatio}`),e.designParameters.targetFAR&&u<e.designParameters.targetFAR*.9&&p.push(`FAR ${u.toFixed(2)} below target ${e.designParameters.targetFAR}`),e.designParameters.targetCoveragePct&&s<e.designParameters.targetCoveragePct*.9&&p.push(`Coverage ${s.toFixed(1)}% below target ${e.designParameters.targetCoveragePct}%`),{totalBuiltSF:o,siteCoveragePct:s,achievedFAR:u,parkingRatio:c,openSpacePct:g,zoningCompliant:m.length===0,violations:m,warnings:p}}function W(n,t){const e=performance.now();try{const a=w(n),r=a.areaSqFt,i={targetFAR:t.designParameters.targetFAR,targetCoveragePct:t.designParameters.targetCoveragePct||50,typology:t.designParameters.buildingTypology,numBuildings:t.designParameters.numBuildings,maxHeightFt:t.zoning.maxFar?Math.floor(t.zoning.maxFar*10):void 0,minHeightFt:20},o=b(a.geometry,i,r),l=o.reduce((m,p)=>m+(p.properties.units||0),0),s=Math.ceil(l*t.designParameters.parking.targetRatio),u=D(a.geometry,t.designParameters.parking,s),g=[...o,...u.features],h=H(g,r,t),S=T(a.geometry,g,t);g.push(...S);const c=performance.now()-e;return{elements:g,metrics:h,envelope:a,processingTime:c}}catch(a){console.error("Error in generateSitePlan:",a);const r=performance.now()-e;return{elements:[],metrics:{totalBuiltSF:0,siteCoveragePct:0,achievedFAR:0,parkingRatio:0,openSpacePct:0,zoningCompliant:!1,violations:["Site plan generation failed"],warnings:[]},envelope:w(n),processingTime:r}}}function T(n,t,e){const a=[],r=t.reduce((s,u)=>s+(u.properties.areaSqFt||0),0),i=f(n),o=i-r,l=i*.2;if(o>l){const s={id:"greenspace_1",type:"greenspace",name:"Open Space",geometry:n,properties:{areaSqFt:Math.min(o,l),use:"landscaping"},metadata:{createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),source:"ai-generated"}};a.push(s)}return a}export{W as generateSitePlan};
