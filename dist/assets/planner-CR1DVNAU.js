function v(n){const t=n.coordinates[0];let e=0;for(let a=0;a<t.length-1;a++)e+=t[a][0]*t[a+1][1],e-=t[a+1][0]*t[a][1];return Math.abs(e)/2}function M(n,t){const e=n.coordinates[0],a=t.coordinates[0],r=t.coordinates[1];let i=!1;for(let o=0,s=e.length-1;o<e.length;s=o++)e[o][1]>r!=e[s][1]>r&&a<(e[s][0]-e[o][0])*(r-e[o][1])/(e[s][1]-e[o][1])+e[o][0]&&(i=!i);return i}function B(n){const t=n.coordinates[0];let e=t[0][0],a=t[0][1],r=t[0][0],i=t[0][1];for(const o of t)e=Math.min(e,o[0]),a=Math.min(a,o[1]),r=Math.max(r,o[0]),i=Math.max(i,o[1]);return{minX:e,minY:a,maxX:r,maxY:i}}function C(n){const t=B(n),e=v(n);return{geometry:n,areaSqFt:e,bounds:t}}function R(n,t,e){const a=e*t.targetFAR,r=e*(t.targetCoveragePct/100),i=$(t.typology),o=[],s=B(n);v(n);const c=Math.ceil(Math.sqrt(t.numBuildings)),d=(s.maxX-s.minX)/c,g=(s.maxY-s.minY)/Math.ceil(t.numBuildings/c);let p=0,h=0;for(let l=0;l<Math.ceil(t.numBuildings/c)&&h<t.numBuildings;l++)for(let m=0;m<c&&h<t.numBuildings;m++){const S=s.minX+m*d+d/2,u=s.minY+l*g+g/2,F=a-p,y=t.numBuildings-h,f=F/y,x=Math.min(f,r-p);if(x>0){const P=k(h,S,u,d*.8,g*.8,x,i,t);o.push(P),p+=P.properties.areaSqFt||0,h++}}return o}function k(n,t,e,a,r,i,o,s){const c=a*r,d=Math.sqrt(i/c),g=a*d,p=r*d,h=A(t,e,g,p),l=g*p,m=Math.max(1,Math.floor(i/l)),S=m*10;return{id:`building_${n}`,type:"building",name:`Building ${n+1}`,geometry:h,properties:{areaSqFt:i,units:Math.floor(i/800),heightFt:Math.min(S,s.maxHeightFt||100),stories:m,use:z(o),color:q(o),rotation:0},metadata:{createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),source:"ai-generated"}}}function A(n,t,e,a){const r=e/2,i=a/2;return{type:"Polygon",coordinates:[[[n-r,t-i],[n+r,t-i],[n+r,t+i],[n-r,t+i],[n-r,t-i]]]}}function $(n){const t={bar:{id:"bar",name:"Bar Building",description:"Rectangular building with linear layout",shape:"rectangle",aspectRatio:3,defaultStories:3,defaultHeightFt:30},"L-shape":{id:"L-shape",name:"L-Shaped Building",description:"L-shaped building for corner lots",shape:"L-shape",aspectRatio:1.5,defaultStories:2,defaultHeightFt:20},podium:{id:"podium",name:"Podium Building",description:"Mixed-use with podium and tower",shape:"podium",aspectRatio:1,defaultStories:8,defaultHeightFt:80},custom:{id:"custom",name:"Custom Building",description:"Custom building design",shape:"custom",aspectRatio:1,defaultStories:2,defaultHeightFt:20}};return t[n]||t.bar}function z(n){switch(n.id){case"podium":return"mixed-use";case"bar":return"residential";case"L-shape":return"commercial";default:return"residential"}}function q(n){switch(n.id){case"podium":return"#8B5CF6";case"bar":return"#3B82F6";case"L-shape":return"#10B981";default:return"#6B7280"}}function D(n,t,e){const a=B(n);v(n);const r=t.stallWidthFt,i=t.stallDepthFt,o=t.aisleWidthFt,s=Math.floor((a.maxX-a.minX)/(r+o)),c=Math.floor((a.maxY-a.minY)/i),d=s*c,g=Math.min(e,d),p=[],h=[];let l=0,m=0,S=0;for(let F=0;F<c&&l<g;F++)for(let y=0;y<s&&l<g;y++){const f=a.minX+y*(r+o)+r/2,x=a.minY+F*i+i/2;if(M(n,{coordinates:[f,x]})){let P="standard";m<Math.floor(g*t.adaPct/100)?(P="ada",m++):S<Math.floor(g*t.evPct/100)&&(P="ev",S++);const b={id:`stall_${l}`,x:f,y:x,width:r,height:i,angle:t.layoutAngle||0,type:P};p.push(b);const w={id:`parking_${l}`,type:"parking",name:`Parking Stall ${l+1}`,geometry:E(b),properties:{areaSqFt:r*i,parkingSpaces:1,stallType:P,adaCompliant:P==="ada",evReady:P==="ev"},metadata:{createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),source:"ai-generated"}};h.push(w),l++}}const u={totalStalls:l,adaStalls:m,evStalls:S,utilizationPct:l/e*100,overlapCount:0};return{stalls:p,features:h,metrics:u}}function E(n){const t=n.width/2,e=n.height/2;return{type:"Polygon",coordinates:[[[n.x-t,n.y-e],[n.x+t,n.y-e],[n.x+t,n.y+e],[n.x-t,n.y+e],[n.x-t,n.y-e]]]}}function H(n,t,e){const a=n.filter(u=>u.type==="building"),r=n.filter(u=>u.type==="parking"),i=n.filter(u=>u.type==="greenspace"),o=a.reduce((u,F)=>u+(F.properties.areaSqFt||0),0);r.reduce((u,F)=>u+(F.properties.areaSqFt||0),0);const s=i.reduce((u,F)=>u+(stall.properties.areaSqFt||0),0),c=o/t*100,d=o/t,g=s/t*100,p=a.reduce((u,F)=>u+(F.properties.units||0),0),h=r.reduce((u,F)=>u+(F.properties.parkingSpaces||0),0),l=p>0?h/p:0,m=[],S=[];return e.zoning.maxFar&&d>e.zoning.maxFar&&m.push(`FAR ${d.toFixed(2)} exceeds maximum ${e.zoning.maxFar}`),e.zoning.maxCoveragePct&&c>e.zoning.maxCoveragePct&&m.push(`Coverage ${c.toFixed(1)}% exceeds maximum ${e.zoning.maxCoveragePct}%`),e.zoning.minParkingRatio&&l<e.zoning.minParkingRatio&&m.push(`Parking ratio ${l.toFixed(2)} below minimum ${e.zoning.minParkingRatio}`),e.designParameters.targetFAR&&d<e.designParameters.targetFAR*.9&&S.push(`FAR ${d.toFixed(2)} below target ${e.designParameters.targetFAR}`),e.designParameters.targetCoveragePct&&c<e.designParameters.targetCoveragePct*.9&&S.push(`Coverage ${c.toFixed(1)}% below target ${e.designParameters.targetCoveragePct}%`),{totalBuiltSF:o,siteCoveragePct:c,achievedFAR:d,parkingRatio:l,openSpacePct:g,zoningCompliant:m.length===0,violations:m,warnings:S}}function W(n,t){const e=performance.now();try{const a=C(n),r=a.areaSqFt,i={targetFAR:t.designParameters.targetFAR,targetCoveragePct:t.designParameters.targetCoveragePct||50,typology:t.designParameters.buildingTypology,numBuildings:t.designParameters.numBuildings,maxHeightFt:t.zoning.maxFar?Math.floor(t.zoning.maxFar*10):void 0,minHeightFt:20},o=R(a.geometry,i,r),s=o.reduce((m,S)=>m+(S.properties.units||0),0),c=Math.ceil(s*t.designParameters.parking.targetRatio),d=D(a.geometry,t.designParameters.parking,c),g=[...o,...d.features],p=H(g,r,t),h=T(a.geometry,g,t);g.push(...h);const l=performance.now()-e;return{elements:g,metrics:p,envelope:a,processingTime:l}}catch(a){console.error("Error in generateSitePlan:",a);const r=performance.now()-e;return{elements:[],metrics:{totalBuiltSF:0,siteCoveragePct:0,achievedFAR:0,parkingRatio:0,openSpacePct:0,zoningCompliant:!1,violations:["Site plan generation failed"],warnings:[]},envelope:C(n),processingTime:r}}}function T(n,t,e){const a=[],r=t.reduce((c,d)=>c+(d.properties.areaSqFt||0),0),i=v(n),o=i-r,s=i*.2;if(o>s){const c={id:"greenspace_1",type:"greenspace",name:"Open Space",geometry:n,properties:{areaSqFt:Math.min(o,s),use:"landscaping"},metadata:{createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),source:"ai-generated"}};a.push(c)}return a}export{W as generateSitePlan};
