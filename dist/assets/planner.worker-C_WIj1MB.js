(function(){"use strict";function x(n){const e=n.coordinates[0];let t=0;for(let a=0;a<e.length-1;a++)t+=e[a][0]*e[a+1][1],t-=e[a+1][0]*e[a][1];return Math.abs(t)/2}function b(n,e){const t=n.coordinates[0],a=e.coordinates[0],r=e.coordinates[1];let o=!1;for(let i=0,s=t.length-1;i<t.length;s=i++)t[i][1]>r!=t[s][1]>r&&a<(t[s][0]-t[i][0])*(r-t[i][1])/(t[s][1]-t[i][1])+t[i][0]&&(o=!o);return o}function w(n){const e=n.coordinates[0];let t=e[0][0],a=e[0][1],r=e[0][0],o=e[0][1];for(const i of e)t=Math.min(t,i[0]),a=Math.min(a,i[1]),r=Math.max(r,i[0]),o=Math.max(o,i[1]);return{minX:t,minY:a,maxX:r,maxY:o}}function v(n){const e=w(n),t=x(n);return{geometry:n,areaSqFt:t,bounds:e}}function M(n,e,t){const a=t*e.targetFAR,r=t*(e.targetCoveragePct/100),o=A(e.typology),i=[],s=w(n);x(n);const c=Math.ceil(Math.sqrt(e.numBuildings)),d=(s.maxX-s.minX)/c,g=(s.maxY-s.minY)/Math.ceil(e.numBuildings/c);let m=0,h=0;for(let l=0;l<Math.ceil(e.numBuildings/c)&&h<e.numBuildings;l++)for(let p=0;p<c&&h<e.numBuildings;p++){const S=s.minX+p*d+d/2,u=s.minY+l*g+g/2,F=a-m,f=e.numBuildings-h,R=F/f,P=Math.min(R,r-m);if(P>0){const y=C(h,S,u,d*.8,g*.8,P,o,e);i.push(y),m+=y.properties.areaSqFt||0,h++}}return i}function C(n,e,t,a,r,o,i,s){const c=a*r,d=Math.sqrt(o/c),g=a*d,m=r*d,h=k(e,t,g,m),l=g*m,p=Math.max(1,Math.floor(o/l)),S=p*10;return{id:`building_${n}`,type:"building",name:`Building ${n+1}`,geometry:h,properties:{areaSqFt:o,units:Math.floor(o/800),heightFt:Math.min(S,s.maxHeightFt||100),stories:p,use:E(i),color:$(i),rotation:0},metadata:{createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),source:"ai-generated"}}}function k(n,e,t,a){const r=t/2,o=a/2;return{type:"Polygon",coordinates:[[[n-r,e-o],[n+r,e-o],[n+r,e+o],[n-r,e+o],[n-r,e-o]]]}}function A(n){const e={bar:{id:"bar",name:"Bar Building",description:"Rectangular building with linear layout",shape:"rectangle",aspectRatio:3,defaultStories:3,defaultHeightFt:30},"L-shape":{id:"L-shape",name:"L-Shaped Building",description:"L-shaped building for corner lots",shape:"L-shape",aspectRatio:1.5,defaultStories:2,defaultHeightFt:20},podium:{id:"podium",name:"Podium Building",description:"Mixed-use with podium and tower",shape:"podium",aspectRatio:1,defaultStories:8,defaultHeightFt:80},custom:{id:"custom",name:"Custom Building",description:"Custom building design",shape:"custom",aspectRatio:1,defaultStories:2,defaultHeightFt:20}};return e[n]||e.bar}function E(n){switch(n.id){case"podium":return"mixed-use";case"bar":return"residential";case"L-shape":return"commercial";default:return"residential"}}function $(n){switch(n.id){case"podium":return"#8B5CF6";case"bar":return"#3B82F6";case"L-shape":return"#10B981";default:return"#6B7280"}}function z(n,e,t){const a=w(n);x(n);const r=e.stallWidthFt,o=e.stallDepthFt,i=e.aisleWidthFt,s=Math.floor((a.maxX-a.minX)/(r+i)),c=Math.floor((a.maxY-a.minY)/o),d=s*c,g=Math.min(t,d),m=[],h=[];let l=0,p=0,S=0;for(let F=0;F<c&&l<g;F++)for(let f=0;f<s&&l<g;f++){const R=a.minX+f*(r+i)+r/2,P=a.minY+F*o+o/2;if(b(n,{coordinates:[R,P]})){let y="standard";p<Math.floor(g*e.adaPct/100)?(y="ada",p++):S<Math.floor(g*e.evPct/100)&&(y="ev",S++);const B={id:`stall_${l}`,x:R,y:P,width:r,height:o,angle:e.layoutAngle||0,type:y};m.push(B);const L={id:`parking_${l}`,type:"parking",name:`Parking Stall ${l+1}`,geometry:D(B),properties:{areaSqFt:r*o,parkingSpaces:1,stallType:y,adaCompliant:y==="ada",evReady:y==="ev"},metadata:{createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),source:"ai-generated"}};h.push(L),l++}}const u={totalStalls:l,adaStalls:p,evStalls:S,utilizationPct:l/t*100,overlapCount:0};return{stalls:m,features:h,metrics:u}}function D(n){const e=n.width/2,t=n.height/2;return{type:"Polygon",coordinates:[[[n.x-e,n.y-t],[n.x+e,n.y-t],[n.x+e,n.y+t],[n.x-e,n.y+t],[n.x-e,n.y-t]]]}}function T(n,e,t){const a=n.filter(u=>u.type==="building"),r=n.filter(u=>u.type==="parking"),o=n.filter(u=>u.type==="greenspace"),i=a.reduce((u,F)=>u+(F.properties.areaSqFt||0),0);r.reduce((u,F)=>u+(F.properties.areaSqFt||0),0);const s=o.reduce((u,F)=>u+(stall.properties.areaSqFt||0),0),c=i/e*100,d=i/e,g=s/e*100,m=a.reduce((u,F)=>u+(F.properties.units||0),0),h=r.reduce((u,F)=>u+(F.properties.parkingSpaces||0),0),l=m>0?h/m:0,p=[],S=[];return t.zoning.maxFar&&d>t.zoning.maxFar&&p.push(`FAR ${d.toFixed(2)} exceeds maximum ${t.zoning.maxFar}`),t.zoning.maxCoveragePct&&c>t.zoning.maxCoveragePct&&p.push(`Coverage ${c.toFixed(1)}% exceeds maximum ${t.zoning.maxCoveragePct}%`),t.zoning.minParkingRatio&&l<t.zoning.minParkingRatio&&p.push(`Parking ratio ${l.toFixed(2)} below minimum ${t.zoning.minParkingRatio}`),t.designParameters.targetFAR&&d<t.designParameters.targetFAR*.9&&S.push(`FAR ${d.toFixed(2)} below target ${t.designParameters.targetFAR}`),t.designParameters.targetCoveragePct&&c<t.designParameters.targetCoveragePct*.9&&S.push(`Coverage ${c.toFixed(1)}% below target ${t.designParameters.targetCoveragePct}%`),{totalBuiltSF:i,siteCoveragePct:c,achievedFAR:d,parkingRatio:l,openSpacePct:g,zoningCompliant:p.length===0,violations:p,warnings:S}}function q(n,e){const t=performance.now();try{const a=v(n),r=a.areaSqFt,o={targetFAR:e.designParameters.targetFAR,targetCoveragePct:e.designParameters.targetCoveragePct||50,typology:e.designParameters.buildingTypology,numBuildings:e.designParameters.numBuildings,maxHeightFt:e.zoning.maxFar?Math.floor(e.zoning.maxFar*10):void 0,minHeightFt:20},i=M(a.geometry,o,r),s=i.reduce((p,S)=>p+(S.properties.units||0),0),c=Math.ceil(s*e.designParameters.parking.targetRatio),d=z(a.geometry,e.designParameters.parking,c),g=[...i,...d.features],m=T(g,r,e),h=I(a.geometry,g,e);g.push(...h);const l=performance.now()-t;return{elements:g,metrics:m,envelope:a,processingTime:l}}catch(a){console.error("Error in generateSitePlan:",a);const r=performance.now()-t;return{elements:[],metrics:{totalBuiltSF:0,siteCoveragePct:0,achievedFAR:0,parkingRatio:0,openSpacePct:0,zoningCompliant:!1,violations:["Site plan generation failed"],warnings:[]},envelope:v(n),processingTime:r}}}function I(n,e,t){const a=[],r=e.reduce((c,d)=>c+(d.properties.areaSqFt||0),0),o=x(n),i=o-r,s=o*.2;if(i>s){const c={id:"greenspace_1",type:"greenspace",name:"Open Space",geometry:n,properties:{areaSqFt:Math.min(i,s),use:"landscaping"},metadata:{createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),source:"ai-generated"}};a.push(c)}return a}self.onmessage=n=>{const{type:e,payload:t}=n.data;try{switch(e){case"GENERATE_SITE_PLAN":const{parcelGeoJSON:a,config:r}=t,i={type:"SITE_PLAN_GENERATED",payload:q(a,r)};self.postMessage(i);break;default:throw new Error(`Unknown message type: ${e}`)}}catch(a){const r={type:"ERROR",payload:{error:a instanceof Error?a.message:"Unknown error"}};self.postMessage(r)}}})();
